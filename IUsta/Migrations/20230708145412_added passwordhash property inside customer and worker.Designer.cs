// <auto-generated />
using System;
using IUsta.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IUsta.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20230708145412_added passwordhash property inside customer and worker")]
    partial class addedpasswordhashpropertyinsidecustomerandworker
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomerWorker", b =>
                {
                    b.Property<Guid>("FavoriteWorkersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoriteWorkersId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("CustomerWorker");
                });

            modelBuilder.Entity("IUsta.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("IUsta.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IUsta.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkingAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkingAreaId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("IUsta.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("IUsta.Models.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkingAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkingAreaId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("IUsta.Models.WorkingArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkAreaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("WorkingAreas");
                });

            modelBuilder.Entity("CustomerWorker", b =>
                {
                    b.HasOne("IUsta.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("FavoriteWorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUsta.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IUsta.Models.Category", b =>
                {
                    b.HasOne("IUsta.Models.Admin", "Admin")
                        .WithMany("Categories")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("IUsta.Models.Customer", b =>
                {
                    b.HasOne("IUsta.Models.WorkingArea", "WorkingArea")
                        .WithMany()
                        .HasForeignKey("WorkingAreaId");

                    b.Navigation("WorkingArea");
                });

            modelBuilder.Entity("IUsta.Models.Reservation", b =>
                {
                    b.HasOne("IUsta.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUsta.Models.Worker", "Worker")
                        .WithMany("Reservations")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("IUsta.Models.Worker", b =>
                {
                    b.HasOne("IUsta.Models.WorkingArea", "WorkingArea")
                        .WithMany()
                        .HasForeignKey("WorkingAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkingArea");
                });

            modelBuilder.Entity("IUsta.Models.WorkingArea", b =>
                {
                    b.HasOne("IUsta.Models.Admin", "Admin")
                        .WithMany("WorkingAreas")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("IUsta.Models.Admin", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("WorkingAreas");
                });

            modelBuilder.Entity("IUsta.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("IUsta.Models.Worker", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
